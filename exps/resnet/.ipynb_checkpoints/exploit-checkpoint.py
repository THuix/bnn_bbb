import torchmetrics
import pickle as pkl

ECE = torchmetrics.CalibrationError(n_bins=15, norm='l1')
accuracy = torchmetrics.Accuracy()
criterion = nn.CrossEntropyLoss(reduction='mean')

def get_acc(pred, true):
    accuracy.update(pred, true)
    acc = accuracy.compute()
    accuracy.reset()
    return acc.item()

def get_ece(pred, true):
    ECE.update(pred.softmax(dim=1), true)
    ece = ECE.compute()
    ECE.reset()
    return ece.item()
    
def get_nll(pred, true):
    return criterion(pred, true)

def get_conf(pred, true):
    conf = pred.softmax(dim=1).max(dim=1)
    return conf

def export(results):
    acc, ece, nll, conf = [], [], [], []
    for result, label in results:
        flattened_result = result.flatten(0, 1) # nb points samples, 10
        flattened_label = label.flatten() # nb points
        acc.append([get_acc(flattened_result[:, idx, :], flattened_label) for idx in range(nb_samples)])
        ece.append([get_ece(flattened_result[:, idx, :], flattened_label) for idx in range(nb_samples)])
        nll.append([get_nll(flattened_result[:, idx, :], flattened_label) for idx in range(nb_samples)])
        conf.append([get_conf(flattened_result[:, idx, :], flattened_label) for idx in range(nb_samples)])
    return acc, ece, nll, conf

def export_all(results_list):
    acc_list, ece_list, nll_list, conf_list = [], [], [], []
    for results in results_list:
        acc, ece, nll, conf = export(results)
        acc_list.append((np.mean(acc), np.Std(acc)))
        ece_list.append((np.mean(ece), np.std(ece)))
        nll_list.append((np.mean(nll), np.std(nll)))
        conf_list.append((np.mean(conf), np.std(conf)))
    return acc_list, ece_list, nll_list, conf_list  

def load_pickle_file(path):
    results = pkl.load(open('results.pkl', 'wb'))
    eta_list = results['eta_list']
    results_list = results['results_list']
    results_nn_list = results['results_nn_list']  
    return eta_list, results_list, results_nn_list

def plot(x, y, y_nn, title):
    plt.plot(x, y[:, 0], '-o', label='BNN')
    ci = 1.96 * y[:, 1] / len(y)
    plt.fill_between(x, (y[:, 0]-ci), (y[:, 0]+ci), color='r', alpha=0.5)
    plt.plot(x, y_nn[:, 0], '-o', label='NN')
    plt.xscale('log')
    plt.legend()
    plt.title(title)
    plt.show()
    plt.close()

def main(path):
    eta_list, results_list, results_nn_list = load_pickel_file(path)
    acc_bnn, ece_bnn, nll_bnn, conf_bnn = extract_all(results_list)
    acc_nn, ece_nn, nll_nn, conf_nn = extract(results_nn_list)
    plot(eta_list, acc_bnn, acc_nn, 'Accuracy')
    plot(eta_list, ece_bnn, acc_nn, 'ECE')
    plot(eta_list, nll_bnn, acc_nn, 'Accuracy')



        
        