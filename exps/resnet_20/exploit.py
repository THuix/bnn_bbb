import torchmetrics
import pickle as pkl
from torch import nn
import numpy as np
import torch

ECE = torchmetrics.CalibrationError(n_bins=15, norm='l1')
accuracy = torchmetrics.Accuracy()
criterion = nn.CrossEntropyLoss(reduction='mean')

def get_acc(pred, true):
    accuracy.update(pred, true)
    acc = accuracy.compute()
    accuracy.reset()
    return acc.item()

def get_ece(pred, true):
    ECE.update(pred, true)
    ece = ECE.compute()
    ECE.reset()
    return ece.item()
    
def get_nll(pred, true):
    return - torch.log(pred[range(len(true)), true]).mean().item()

def get_conf(pred, true):
    conf = pred.max(dim=1).values
    return conf.mean().item()

def export(result, label):
    flattened_result = result.flatten(0, 1) # nb points samples, 10
    flattened_label = label.flatten().long() # nb points
    avg_prob = flattened_result.softmax(dim=-1).mean(dim=1)
    acc = get_acc(avg_prob, flattened_label)
    ece = get_ece(avg_prob, flattened_label)
    nll = get_nll(avg_prob, flattened_label)
    conf = get_conf(avg_prob, flattened_label)
    return acc, ece, nll, conf

def export_all(models):
    acc_list, ece_list, nll_list, conf_list = [], [], [], []
    for results, labels in models['results_list']:
        acc, ece, nll, conf = export(results, labels)
        acc_list.append(acc)
        ece_list.append(ece)
        nll_list.append(nll)
        conf_list.append(conf)
    return acc_list, ece_list, nll_list, conf_list  

def load_pickle_file(idx):
    data = pkl.load(open(f'results_1.pkl', 'rb'))
    return data

def plot(x, y, title, file_name):
    y_mean = np.mean(y, axis=0)
    y_std = np.std(y, axis=0)
    plt.plot(x, y_mean, '-o', label='BNN')
    ci = 1.96 * y_std / len(y)
    plt.fill_between(x, (y_mean-ci), (y_mean+ci), color='r', alpha=0.5)
    plt.xscale('log')
    plt.legend()
    plt.title(title)
    plt.savefig(file_name)
    plt.close()

def main():
    nb_models = 6
    acc, ece, nll, conf = np.zeros((5, nb_models)), np.zeros((5, nb_models)), np.zeros((5, nb_models)), np.zeros((5, nb_models))
    for idx in range(5):
        models = load_pickle_file(idx)
        raise ValueError(models['eta_list'])
        acc[idx, :], ece[idx, :], nll[idx, :], conf[idx, :] = export_all(models)
    #acc_nn, ece_nn, nll_nn, conf_nn = extract(results_nn_list)
    plot(eta_list, acc, 'Accuracy', 'acc.pdf')
    plot(eta_list, ece, 'ECE', 'ece.pdf')
    plot(eta_list, nll, 'NLL', 'nll.pdf')


if __name__ == '__main__':
    main()



        
        